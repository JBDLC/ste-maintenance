#!/usr/bin/env python3
"""
Script de diagnostic pour Render avec PostgreSQL
"""

import os
from dotenv import load_dotenv
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# Configuration de la base de donn√©es
DATABASE_URL = os.getenv('DATABASE_URL')
print(f"üîç DATABASE_URL: {DATABASE_URL}")

if DATABASE_URL and DATABASE_URL.startswith('postgres://'):
    DATABASE_URL = DATABASE_URL.replace('postgres://', 'postgresql+psycopg2://', 1)
elif DATABASE_URL and DATABASE_URL.startswith('postgresql://'):
    DATABASE_URL = DATABASE_URL.replace('postgresql://', 'postgresql+psycopg2://', 1)

if DATABASE_URL:
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URL
    print(f"‚úÖ URL configur√©e: {DATABASE_URL}")
else:
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///maintenance.db'
    print("‚ö†Ô∏è Utilisation de SQLite (pas de DATABASE_URL)")

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

def test_database_connection():
    """Test de connexion √† la base de donn√©es"""
    try:
        print("üîç Test de connexion √† la base de donn√©es...")
        with app.app_context():
            # Test simple de connexion
            db.engine.execute("SELECT 1")
            print("‚úÖ Connexion √† PostgreSQL r√©ussie!")
            
            # V√©rifier les tables
            result = db.engine.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = [row[0] for row in result]
            print(f"üìã Tables trouv√©es: {tables}")
            
            return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_models():
    """Test de cr√©ation des mod√®les"""
    try:
        print("üîç Test de cr√©ation des mod√®les...")
        with app.app_context():
            # Cr√©er les tables
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s!")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def test_user_creation():
    """Test de cr√©ation d'un utilisateur admin"""
    try:
        print("üîç Test de cr√©ation d'utilisateur admin...")
        with app.app_context():
            from werkzeug.security import generate_password_hash
            
            # Importer les mod√®les
            from app import User, UserPermission
            
            # V√©rifier si l'admin existe d√©j√†
            admin = User.query.filter_by(username='admin').first()
            if admin:
                print("‚úÖ Utilisateur admin existe d√©j√†")
                return True
            
            # Cr√©er l'admin
            admin = User(
                username='admin',
                password_hash=generate_password_hash('admin123')
            )
            db.session.add(admin)
            db.session.commit()
            
            # Cr√©er les permissions
            pages = ['sites', 'localisations', 'equipements', 'pieces', 'lieux_stockage', 
                     'maintenances', 'calendrier', 'mouvements', 'parametres']
            
            for page in pages:
                permission = UserPermission(
                    user_id=admin.id,
                    page=page,
                    can_access=True
                )
                db.session.add(permission)
            
            db.session.commit()
            print("‚úÖ Utilisateur admin cr√©√© avec succ√®s!")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}")
        return False

def main():
    print("üöÄ Diagnostic de l'application sur Render")
    print("=" * 50)
    
    # Test 1: Connexion √† la base
    if not test_database_connection():
        print("‚ùå √âCHEC: Impossible de se connecter √† PostgreSQL")
        return
    
    # Test 2: Cr√©ation des tables
    if not test_models():
        print("‚ùå √âCHEC: Impossible de cr√©er les tables")
        return
    
    # Test 3: Cr√©ation de l'admin
    if not test_user_creation():
        print("‚ùå √âCHEC: Impossible de cr√©er l'utilisateur admin")
        return
    
    print("‚úÖ TOUS LES TESTS R√âUSSIS!")
    print("üéâ L'application devrait fonctionner correctement")

if __name__ == "__main__":
    main() 